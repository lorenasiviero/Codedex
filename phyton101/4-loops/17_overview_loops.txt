================================================================
Loops, Range Function, and String Interpolation in Python
================================================================

Loops:
--------
Loops allow us to repeat a block of code until a condition is met or
until we have processed all items in a sequence. Two primary types of
loops in Python are the while loop and the for loop.

While Loop (Example 18):
-------------------------
- Repeats code as long as a given condition is True.
- Example: 
      while condition:
          # Execute code

For Loop (Example 19):
-----------------------
- Iterates over a sequence (such as lists, strings, or ranges) automatically.
- Basic syntax:
      for variable in sequence:
          # Execute code for each item

Range Function:
----------------
- The range() function returns a sequence of numbers.
- Useful for when you want to loop a specified number of times.
- By default, it starts at 0 and increments by 1, ending before a specified number.
- Example:
      for i in range(6):
          print(i)
  This prints numbers 0 through 5.

Strings:
---------
- Strings store text and can be manipulated in numerous ways.
- In loops, you can iterate over characters in a string or use strings to format output.

String Interpolation:
---------------------
- A method for embedding values within a string, making it similar to string concatenation but more elegant.
- This is done using f-strings (formatted string literals) where you prefix the string with `f` and insert variables in curly braces {}.
- Example:
      for i in range(5):
          print(f'The square of {i} is {i*i}')
  This prints a message that dynamically shows the current number and its square.

Summary:
--------
- **Loops (For & While):** Repeat a block of code to efficiently process data.
- **For Loop:** Use for loops to iterate over sequences.
- **Range Function:** Use range() to generate a sequence of numbers easily.
- **String Handling:** Process and manipulate text.
- **String Interpolation:** Use f-strings to seamlessly insert variables into strings, making your output more dynamic and readable.

This overview ties together the fundamentals of control flow and string formatting in Python, helping you iterate over data, generate sequences, and create clear, dynamic messages.
================================================================